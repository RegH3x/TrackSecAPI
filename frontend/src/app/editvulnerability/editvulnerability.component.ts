import { Component, OnInit} from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { VulnerabilitiesService } from '../services/vulnerabilities.service';
import { ParametersService } from '../services/parameters.service';
import { Parameter } from '../models/parameter.model';
import { Vulnerability } from '../models/vulnerability.model';

@Component({
  selector: 'app-editvulnerability',
  templateUrl: './editvulnerability.component.html',
  styleUrls: ['./editvulnerability.component.css']
})

export class EditvulnerabilityComponent implements OnInit {
  Parameter: Parameter[] = new Array();
  Vulnerability: Vulnerability[] = new Array();
  updateVulnerabilityForm!: FormGroup;
  loading: boolean = false;
  id: string | null;
  idendpoint: string | null;
  idvulnerability: string | null;
  selectedLinkedParameterID!: string | null;
  screenShot: string;

  constructor(private vulnerabilities: VulnerabilitiesService, private parameters: ParametersService, public route: ActivatedRoute) {
    this.id = this.route.snapshot.paramMap.get('id');
    this.idendpoint = this.route.snapshot.paramMap.get('idendpoint');
    this.idvulnerability = this.route.snapshot.paramMap.get('idvulnerability');
    this.screenShot = '';
  }

  ngOnInit(): void {
    this.parameters.getParametersEndpointProject(this.id!, this.idendpoint!).subscribe(res => {
      this.Parameter = res;
      console.log(this.Parameter);
    });

    this.updateVulnerabilityForm = new FormGroup({
      vulName: new FormControl(),
      screenshot: new FormControl(),
      note: new FormControl(),
      consequence: new FormControl(),
      requestPayload: new FormControl(),
      responseServer: new FormControl(),
      vulState: new FormControl(),
      linkedParameterID: new FormControl()
    })



    this.vulnerabilities.getVulnerabilitiesEndpointProjectById(this.id!, this.idendpoint!, this.idvulnerability!).subscribe(res => {
      this.Vulnerability = res;
      this.updateVulnerabilityForm.get("vulName")!.setValue(this.Vulnerability[0].vulName);
      if(this.updateVulnerabilityForm.value.screenshot != null){
        this.updateVulnerabilityForm.get("screenshot")!.setValue(this.Vulnerability[0].screenshot);
      }
      else{}
      this.updateVulnerabilityForm.get("note")!.setValue(this.Vulnerability[0].note);
      this.updateVulnerabilityForm.get("consequence")!.setValue(this.Vulnerability[0].consequence);
      this.updateVulnerabilityForm.get("requestPayload")!.setValue(this.Vulnerability[0].requestPayload);
      this.updateVulnerabilityForm.get("responseServer")!.setValue(this.Vulnerability[0].responseServer);
      this.updateVulnerabilityForm.get("vulState")!.setValue(this.Vulnerability[0].vulState);
      console.log(this.Vulnerability);
    })
  }

  editVulnerability() {
    if(this.updateVulnerabilityForm.value.screenshot != null){
      this.screenShot = this.updateVulnerabilityForm.value.screenshot.replace("C:\\fakepath\\", "")
    }
    else{
      this.screenShot = this.updateVulnerabilityForm.value.screenshot
    }
    this.vulnerabilities.updateVulnerabilityEndpoint(
      this.id!,
      this.idendpoint!,
      this.idvulnerability!,
      this.updateVulnerabilityForm.value.vulName,
      this.screenShot,
      this.updateVulnerabilityForm.value.note,
      this.updateVulnerabilityForm.value.consequence,
      this.updateVulnerabilityForm.value.requestPayload,
      this.updateVulnerabilityForm.value.responseServer,
      this.updateVulnerabilityForm.value.vulState,
      this.updateVulnerabilityForm.value.linkedParameterID
    ).subscribe(res => {
      alert(res);
      console.log(res);
    });
  }
  
}